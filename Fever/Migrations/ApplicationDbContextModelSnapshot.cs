// <auto-generated />
using System;
using Fever.Infraestructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fever.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.BaseEvent", b =>
                {
                    b.Property<int>("BaseEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("base_event_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BaseEventId"));

                    b.Property<string>("SellMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sell_mode");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("BaseEventId");

                    b.HasIndex("BaseEventId")
                        .HasDatabaseName("idx_base_events_base_event_id");

                    b.ToTable("base_events", (string)null);
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BaseEventId")
                        .HasColumnType("int")
                        .HasColumnName("base_event_id");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("event_end_date");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("event_start_date");

                    b.Property<DateTime>("SellFrom")
                        .HasColumnType("timestamp")
                        .HasColumnName("sell_from");

                    b.Property<DateTime>("SellTo")
                        .HasColumnType("timestamp")
                        .HasColumnName("sell_to");

                    b.Property<bool>("SoldOut")
                        .HasColumnType("boolean")
                        .HasColumnName("sold_out");

                    b.HasKey("Id");

                    b.HasIndex("BaseEventId")
                        .HasDatabaseName("idx_event_base_event_id");

                    b.HasIndex("EventEndDate")
                        .HasDatabaseName("idx_event_event_end_date");

                    b.HasIndex("EventStartDate")
                        .HasDatabaseName("idx_event_event_start_date");

                    b.HasIndex("EventId", "BaseEventId")
                        .IsUnique()
                        .HasDatabaseName("idx_event_baseevent_event_id_base_event_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Numbered")
                        .HasColumnType("boolean")
                        .HasColumnName("numbered");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ZoneId", "EventId")
                        .IsUnique()
                        .HasDatabaseName("ux_zone_zone_id_event_id");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("Fever.Domain.Features.GetEvents.Entities.ResumedEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_date");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal")
                        .HasColumnName("max_price");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal")
                        .HasColumnName("min_price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("EventId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("idx_resume_event_end_date");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("idx_resume_event_start_date");

                    b.ToTable("resumed_events", (string)null);
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.Event", b =>
                {
                    b.HasOne("Fever.Domain.Features.Events.Entities.BaseEvent", "BaseEvent")
                        .WithMany("Events")
                        .HasForeignKey("BaseEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseEvent");
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.Zone", b =>
                {
                    b.HasOne("Fever.Domain.Features.Events.Entities.Event", "Event")
                        .WithMany("Zones")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fever.Domain.Features.GetEvents.Entities.ResumedEvent", b =>
                {
                    b.HasOne("Fever.Domain.Features.Events.Entities.Event", "Event")
                        .WithOne("ResumedEvent")
                        .HasForeignKey("Fever.Domain.Features.GetEvents.Entities.ResumedEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.BaseEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Fever.Domain.Features.Events.Entities.Event", b =>
                {
                    b.Navigation("ResumedEvent");

                    b.Navigation("Zones");
                });
#pragma warning restore 612, 618
        }
    }
}
